def label = "worker-solidrust-build-${UUID.randomUUID().toString()}"

def checkOut(git_repo, git_branch='master', git_commit_id, git_repo_credentials, build_dir) {
  dir(build_dir)
    {
      deleteDir()
    }

  dir(build_dir)
    {
      git branch: git_branch, url: git_repo, credentialsId: git_repo_credentials
      sh "git checkout ${git_commit_id}"
    }
}

def build(build_dir, build_container, build_params) {
  dir(build_dir) {
    switch (build_container) {
      case 'python':
        container('python') {
          echo "Initializing Python build..."
          sh '''
            python --version
          '''
        }
        break
      case 'maven':
        container('maven') {
          echo "Initializing Java build with Maven..."
          sh "mvn package ${build_params}"
        }
        break
      case 'gradle':
        container('gradle') {
          echo "Initializing Java build with Gradle..."
          withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh './gradlew clean build ${build_params}'
          }
        }
        break
      case 'node':
        container('node') {
          echo "Initializing NodeJS build with YARN..."
          sh '''
            yarn install
            yarninstall -g sonarqube-scanner
            git config url."https://".insteadOf git://
            npm install
            npm install -g sonarqube-scanner
          '''
        }
        break
      case 'quasar':
        container('quasar') {
          echo "Initializing NodeJS build with Quasar..."
          sh '''
            yarn
            yarn global add @quasar/cli
            quasar build
          '''
        }
        break
      default:
        echo 'No build container specified, or unknown build container type. Exiting ...'
        sh 'exit 1'
        break
    }
  }
}

def unitTest(build_dir, build_container, test_params) {
  dir(build_dir) {
    switch (build_container) {
      case 'python':
        container('python') {
          echo "Testing Python with parameters: ${test_params}"
          sh "python --version"
        }
        break
      case 'maven':
        container('maven') {
          sh "mvn test ${test_params}"
        }
        break
      case 'gradle':
        container('gradle') {
          sh "./gradlew test ${test_params}"
        }
        break
      case "node":
        container('node') {
          sh 'yarn test --clearCache'
          sh 'yarn run test:coverage'
        }
        break
      case 'quasar':
        container('quasar') {
          sh """
            quasar test
          """
        }
        break
      default:
        echo 'No/Incorrect build tool specified. Exiting ...'
        sh 'exit 1'
        break
    }
  }
}

def staticCodeAnalysis(analysis_dir, sonar_server_name, scannerHome, sonar_credentials_id, build_container) {
  dir(analysis_dir) {
    switch (build_container) {
      case 'python':
        container(build_container) {
          echo "Analyzing Python code.."
        }
        break
      case 'maven':
      case 'gradle':
        container(build_container) {
          echo "Analyzing static Java code..."
          withSonarQubeEnv(credentialsId: sonar_credentials_id, installationName: sonar_server_name) {
            sh "${scannerHome}/bin/sonar-scanner"
            sh './gradlew build jacocoTestReport sonarqube'
          }
          timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
          }
        }
        break
      case 'quasar':
      case "node":
        container('node') {
          echo "Analyzing static NodeJS code..."
          withSonarQubeEnv(credentialsId: sonar_credentials_id, installationName: sonar_server_name) {
            sh 'sonar-scanner'
          }
          timeout(time: 10, unit: 'MINUTES') {
            waitForQualityGate abortPipeline: true
          }
        }
      default:
        echo 'No/Incorrect build container specified. Exiting ...'
        sh 'exit 1'
        break
    }
  }
}

def getArtifactDetails(build_dir, build_container) {
  def ARTIFACT_ID = ''
  def GROUP_ID = ''
  def VERSION = ''
  def JAR_PATH = ''

  dir(build_dir) {
    switch (build_container) {
      case 'python':
        container('python') {
          echo "Import static Python build Artifacts..."
        }
        break
      case 'gradle':
        container('gradle') {
          sh 'ls -la'
          sh 'chmod +x gradlew'
          sh './gradlew build'
          ARTIFACT_ID = sh (script: './gradlew -q artifactId', returnStdout: true).trim()
          GROUP_ID    = sh (script: './gradlew -q groupId', returnStdout: true).trim()
          VERSION     = sh (script: './gradlew -q version', returnStdout: true).trim()
          JAR_PATH    = sh (script: './gradlew -q artifactPath', returnStdout: true).trim()
        }
        break
      case 'maven':
        container('maven') {
          // Read POM xml file using 'readMavenPom'
          pom = readMavenPom file: 'pom.xml'
          // Find the artifact in target folder
          filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
          // Print artifact info
          echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
          // Extract artifact path
          artifactPath = filesByGlob[0].path
          // Check if the artifact name exists
          artifactExists = fileExists artifactPath
          ARTIFACT_ID = pom.artifactId
          GROUP_ID    = pom.groupId
          VERSION     = pom.version
          JAR_PATH    = artifactPath
        }
        break
      case 'node':
      case 'quasar':
      default:
        echo "no static artififact configuration found, skipping..."
        break
    }
    return [ARTIFACT_ID, GROUP_ID, VERSION, JAR_PATH]
  }
}

def artifactUpload(build_dir, build_tool, nexus_url, nexus_credentials_id, nexus_repository) {
  (ARTIFACT_ID,GROUP_ID,VERSION,JAR_PATH) = getArtifactDetails(build_dir, build_tool)
    echo "Printing artifact details"
    echo "Artifact id: ${ARTIFACT_ID}"
    echo "JAR PATH: ${JAR_PATH}"
  dir(build_dir) {
    def buildSuccess = fileExists JAR_PATH
    if (buildSuccess) {
      nexusArtifactUploader(
        nexusVersion: 'nexus3',
        protocol: 'https',
        nexusUrl: nexus_url,
        groupId: GROUP_ID,
        version: VERSION,
        repository: nexus_repository,
        credentialsId: nexus_credentials_id,
        artifacts: [
            // Artifact generated such as .jar, .ear and .war files.
            [artifactId: ARTIFACT_ID,
            classifier: '',
            file: JAR_PATH,
            type: 'jar'],
        ]
      )
    } else {
      error "*** File: ${artifactPath}, could not be found"
    }
  }
}

def buildPushDockerImage(docker_registry, docker_registry_creds, ecr_domain_url, build_dir, git_commit_id, git_tag) {
  def devImage = ''
  dir(build_dir) {
    GIT_COMMIT_ID =  git_commit_id
    DOCKER_IMAGE_TAG = git_tag
    container('docker') {
      withDockerRegistry(credentialsId: docker_registry_creds, url: ecr_domain_url) {
        devImage = docker.build(docker_registry, '--network=host container')
        devImage.push("${GIT_COMMIT_ID}")
        devImage.push("${DOCKER_IMAGE_TAG}")
      }
    }
  }
}

def createGitTag(build_dir, git_repo_name, git_repo_credentials, git_branch, git_commit_id, git_tag) {
  dir(build_dir) {
    sh """
    git config --global user.name 'Shaun Prince'
    git config --global user.email 'suparious@solidrust.net'
    """
    git branch: git_branch, url: "git@github.org:suparious/${git_repo_name}.git", credentialsId: git_repo_credentials
    sshagent(credentials: [git_repo_credentials]) {
    sh """
      git tag -a ${git_tag} ${git_commit_id} -m "Jenkins: Created tag: ${git_tag} for commit id: ${git_commit_id} on branch: ${git_branch}"
      git push origin ${git_tag}
    """
    }
  }
}

podTemplate(label: label, containers: [
  containerTemplate(
      name: 'gradle',
      image: '079592947989.dkr.ecr.us-east-2.amazonaws.com/reef/co/base-images/gradle:6.5.1-jdk11',
      command: 'cat',
      ttyEnabled: true
  ),
  containerTemplate(
      name: 'docker',
      image: 'docker:latest',
      command: 'cat',
      ttyEnabled: true,
      resourceRequestEphemeralStorage: '1Gi',
      resourceLimitEphemeralStorage: '2Gi'
  ),
  containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'node', image: 'node:15', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'quasar', image: 'node:12.18.2', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'python', image: 'python:3.9', command: 'cat', ttyEnabled: true)
],
volumes: [
hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
]) {
  node(label) {
    //-- Build Name --//
    currentBuild.displayName = "${currentBuild.number}-${REPO_NAME}-${TAG}"

    //-- Git --//
    def GIT_CODE_REPO = "git@bitbucket.org:parkjockey/${REPO_NAME}.git"
    def GIT_REPO_NAME =  REPO_NAME
    def GIT_REPO_CREDENTIALS = 'Bitbucket-credentials'
    def GIT_BRANCH = BRANCH
    def GIT_TAG = TAG
    def GIT_COMMIT_ID = COMMIT_ID

    //-- Build --//
    def BUILD_DIR = REPO_NAME
    def BUILD_CONTAINER = BUILD_TOOL
    def BUILD_PARAMS = ''

    //-- Unit test --//
    def UNIT_TEST_PARAMS = ''

    //-- Static code analysis --//
    def SONAR_SERVER_NAME = 'Reef-SonarQube'
    def SONAR_CREDENTIALS_ID = 'sonarqube-credentials'
    SCANNER_HOME = tool 'Reef-SonarQube-Scanner'

    // -- Artifact repository --//
    def NEXUS_URL = 'nexus.co.reefplatform.com'
    def NEXUS_CREDENTIALS = 'nexus-credentials'
    def NEXUS_REPOSITORY = NEXUS_REPO

    //-- Docker registry and images --//
    def DOCKER_REGISTRY = DOCKER_REPO
    def ECR_DOMAIN_URL = 'https://815179467351.dkr.ecr.us-east-2.amazonaws.com'
    def DOCKER_REGISTRY_CREDENTIALS = 'ecr:us-east-2:aws-jenkins-7351-credentials'
    DOCKER_IMAGE_TAG = GIT_TAG

    ////////////////////////////
    // JENKINS STAGE DEFINITIONS
    stage('Code Checkout') {
      checkOut(GIT_CODE_REPO, GIT_BRANCH, GIT_COMMIT_ID, GIT_REPO_CREDENTIALS, BUILD_DIR)
    }
    stage('Build') {
      build(BUILD_DIR, BUILD_CONTAINER, '-x test')
    }
    stage('Unit Test') {
      unitTest(BUILD_DIR,BUILD_CONTAINER,'')
    }
    stage('Static Code Analysis') {
      staticCodeAnalysis(BUILD_DIR, SONAR_SERVER_NAME, SCANNER_HOME, SONAR_CREDENTIALS_ID, BUILD_CONTAINER)
    }
    stage('Upload Artifact to Nexus') {
      echo 'Skip for now...'
      // artifactUpload(BUILD_DIR, BUILD_CONTAINER, NEXUS_URL, NEXUS_CREDENTIALS, NEXUS_REPOSITORY)
    }
    stage('Docker build & publish to ECR') {
      buildPushDockerImage(
        DOCKER_REGISTRY,
        DOCKER_REGISTRY_CREDENTIALS,
        ECR_DOMAIN_URL,
        BUILD_DIR,
        GIT_COMMIT_ID,
        GIT_TAG
      )
    }
    stage('Create Tag') {
      createGitTag(
        BUILD_DIR,
        GIT_REPO_NAME,
        GIT_REPO_CREDENTIALS,
        GIT_BRANCH,
        GIT_COMMIT_ID,
        GIT_TAG
      )
    }
  }
}
